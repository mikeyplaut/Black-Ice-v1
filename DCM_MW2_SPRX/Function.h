
//======================================//
//                                      //
//                                      //
//=============COMMON=STUFF=============//
//                                      //
//                                      //
//======================================//

int my_strcmp(const char *a,const char *b)
{
  if (! (*a | *b)) return 0;
  return (*a!=*b) ? *a-*b : my_strcmp(++a,++b);
}
char* getName(int client)
{
	if(*(int*)0x21910670 + client * 14080 != 0)
	{
		return (char*)(0x21910670 + client * 14080);
	}
	else
	{
		return "Not Ingame";
	}
}
int getLocalName()
{
	return (0x01f9f11c);
}
int getPlayerName(int client)
{
	return (0x14E5408 + (client * 0x3700));
}
int host = 0;
int getHostClientNumber()
{
	for (int i = 0; i < 18; i++)
	{
		if (!my_strcmp((char*)getLocalName(), (char*)getPlayerName(i)))
		{
			return i;
		}

	}
	return 0;
}

unsigned int G_Client(int client, unsigned int Mod = 0)
{
	return (0x14E2200 + (0x3700 * client)) + Mod;
}

unsigned int G_Entity(int client, unsigned int Mod = 0)
{
    return *(int*)0x1319800 + (0x280 * client) + Mod;
}

int gEntity(int client, int mod = 0x00)
{
	return (0x1319800 + mod + (client * 0x280));
}
int gClient(int client, int mod=0x00)
{
	return (0x14E2200 + mod + (client * 0x3700));
}

unsigned int Playerstate(int Client, unsigned int Mod = 0)
{
    return 0x14E2200 + (Client * 0x3700) + Mod;
}


int(*Dvar_FindMallableVar)(const char* DvarName) = (int(*)(const char*))0x0070DF70;
char* Dvar_GetString(const char* Dvar)
{
        return (char*)(*(int*)(Dvar_FindMallableVar(Dvar) + 0xC));
}
const char* getMapName()
	{
		return Dvar_GetString("ui_mapname");
	}

char* getClientName(int clientIndex)
{
    char* temp = (char*)(G_Client(clientIndex) + 0x3208);
    if (strlen(temp) > 0)
            return temp;
    return "";
}

bool isHost(int clientIndex)
{
	return !strcmp((char*)Dvar_GetString("sv_hostname"), (char*)(G_Client(clientIndex) + 0x3208));
}

int ReadInt(int Address)
{
	return *(int*)Address;
}

int CheckTeam(int Client)
{
	return ReadInt(Playerstate(Client, 0x2F60));
}

bool CheckIfLiving(int Client)
{
	return ReadInt(G_Entity(Client, 0x1A8)) > 0 && ReadInt(G_Entity(Client, 0x1A8)) < 100 && ReadInt(Playerstate(Client, 0x2E80)) != 1;
}

bool isAlive(int clientIndex)
{
		return *(bool*)(G_Client(clientIndex) + 0x3193) == false;
}



//======================================//
//                                      //
//                                      //
//==================TOC=================//
//                                      //
//                                      //
//======================================//

struct opd_s
{
	uint32_t sub;
	uint32_t toc;
};
namespace _toc
{
	opd_s SV_GameSendServerCommand_t = { 0x0021A0A0, 0x00724C38 };
	void(*SV_GameSendServerCommand)(int clientIndex, int type, const char* Command) = (void(*)(int, int, const char*))&SV_GameSendServerCommand_t;

	opd_s SV_KickClient_t = { 0x00212C40, 0x00724C38 };
	void(*SV_KickClient)(unsigned int client_s, char *playerName, int maxPlayerNameLen) = (void(*)(unsigned int, char *, int))&SV_KickClient_t;

	opd_s ClientDisconnect_t = { 0x0016C148, 0x00724C38 };
	void(*ClientDisconnect)(int clientNum) = (void(*)(int))&ClientDisconnect_t;

	opd_s Dvar_GetBoolAddress = { 0x00277138, 0x00724C38 };
	bool(*Dvar_GetBool)(const char *dvarName) = (bool(*)(const char*))&Dvar_GetBoolAddress;

	opd_s cBuff_AddText_t = { 0x001D9EC0, 0x00724C38 };
    void(*cBuff_AddText)(int localClientIndex, const char* Command) = (void(*)(int, const char*))&cBuff_AddText_t;

	int (*stdc_printf)(const char*, ...) = (int(*)(const char*, ...))0x0071C2B0;
    int (*stdc_snprintf)(char* destination, size_t len, const char* format, ...) = (int(*)(char*, size_t, const char*, ...))0x0071C2C0;

	opd_s G_GivePlayerWeapon_t = { 0x001C0890, 0x00724C38 };
	typedef void(*G_GPW)(int pPS, int iWeaponIndex, int Camo, int Akimbo);
	G_GPW G_GivePlayerWeapon = (G_GPW)(opd_s*)&G_GivePlayerWeapon_t;

	opd_s G_GetWeaponIndexForName_t = { 0x001BF4A0, 0x00724C38 };
	typedef int(*G_GWIFN)(const char *weaponName);
	G_GWIFN GetWeaponIndex = (G_GWIFN)(opd_s*)&G_GetWeaponIndexForName_t;

	opd_s giveAmmo_t = { 0x00186638, 0x00724C38 };
	typedef void(*gA)(int clientNumber, unsigned int weaponIndex, char weaponModel, int count, int fillClip);
	gA giveAmmo = (gA)(opd_s*)&giveAmmo_t;

	void iPrintlnBold(int client, const char* txt)
	{
			char cmd[0x50];
			stdc_snprintf(cmd, sizeof(cmd), "c \"%s\"", txt);
			SV_GameSendServerCommand(client, 0, cmd);
	}
	void iPrintln(int client, const char* txt)
	{
			char cmd[0x50];
			stdc_snprintf(cmd, sizeof(cmd), "f \"%s\"", txt);
			SV_GameSendServerCommand(client, 0, cmd);
	}


	void SwitchToWeap(int Client, const char *Weapon, int WeaponIndex = 0)//Used like:  SwitchToWeap(0, "deserteaglegold_mp"); or SwitchToWeap(0, "", 46);
	{
		if (WeaponIndex == 0)
		{
			char buffer[100];
			stdc_snprintf(buffer, sizeof(buffer),"a %i", GetWeaponIndex(Weapon));
			SV_GameSendServerCommand(Client, 1, buffer);
		}
		else
		{
			char buffer[100];
			stdc_snprintf(buffer, sizeof(buffer), "a %i", WeaponIndex);
			SV_GameSendServerCommand(Client, 1, buffer);
		}
	}
	
	void giveWeapon(int client, const char* Weapon, bool akimbo, bool GiveAmmo, bool SwitchToWeapon)
{
	G_GivePlayerWeapon(gClient(client), GetWeaponIndex(Weapon), 0, akimbo);
	if (SwitchToWeapon){ SwitchToWeap(client, Weapon); }
	if (GiveAmmo){ giveAmmo(gEntity(client), GetWeaponIndex(Weapon), 0, 999, 1); }
}
};

char* ReadString(int Address)
{
		return (char*)Address;
}

opd_s AddTestClient = { 0x002189D8, 0x00724C38 };
	int(*Sv_AddTestClient)() = (int(*)())&AddTestClient;

int ReadInt32(int Address)
{
		return *(int*)Address;
}

char* GetMap()
{
	char* str = ReadString(0xD495F4); char* MapStr = "/";
    if (_toc::Dvar_GetBool("cl_ingame") == 1)
    {
        if (str==("afghan"))
            MapStr = "Afghan";
        if (str==("highrise"))
            MapStr = "Highrise";
        if (str==("rundown"))
            MapStr = "Rundown";
        if (str==("quarry"))
            MapStr = "Quarry";
        if (str==("nightshift"))
            MapStr = "Skidrow";
        if (str==("terminal"))
            MapStr = "Terminal";
        if (str==("brecourt"))
            MapStr = "Wasteland";
        if (str==("derail"))
            MapStr = "Derail";
        if (str==("estate"))
            MapStr = "Estate";
        if (str==("favela"))
            MapStr = "Favela";
        if (str==("invasion"))
            MapStr = "Invasion";
        if (str==("rust"))
            MapStr = "Rust";
        if (str==("scrapyard") || str==(("boneyard")))
            MapStr = "Scrapyard";
        if (str==("sub"))
            MapStr = "Subbase";
        if (str==("underpass"))
            MapStr = "Underpass";
        if (str==("checkpoint"))
            MapStr = "Karachi";
        if (str==("bailout"))
            MapStr = "Bailout";
        if (str==("compact"))
            MapStr = "Salvage";
        if (str==("storm") || str==(("storm2")))
            MapStr = "Storm";
        if (str==("crash"))
            MapStr = "Crash";
        if (str==("overgrown"))
            MapStr = "Overgrown";
        if (str==("strike"))
            MapStr = "Strike";
        if (str==("vacant"))
            MapStr = "Vacant";
        if (str==("trailerpark"))
            MapStr = "Trailer Park";
        if (str==("fuel"))
            MapStr = "Fuel";
        if (str==("abandon"))
            MapStr = "Carnival";
    }
    return (char*)MapStr;
}

void Sleep(usecond_t time)
{
	sys_timer_usleep(time * 1000);
}

int getCurrentWeapon(int clientIndex)
{
    int Index = ReadInt32(G_Client(clientIndex) + 0x2B4);
    char* MapName = GetMap();
    if ((MapName == "Afghan" || MapName == "Highrise" || MapName == "Karachi" || MapName == "Quarry" || MapName == "Rundown" || MapName == "Terminal" || MapName == "Skidrow" || MapName == "Wasteland"))
    {
        if (Index > 2)
            Index--;
    }
    return Index;
}






//======================================//
//                                      //
//                                      //
//=============MENU=FUNCTIONS===========//
//                                      //
//                                      //
//======================================//

void TEST_FUNC(int client)
{
	_toc::SV_GameSendServerCommand(client, 1, "f \"TEST BITCH\"");
}

void Cbuf_AddText(char* Command)
	{
		opd_s Cbuf1 = {0x001D9EC0 , 0x00724C38 };
		void(*Cbuf)(int type,char* cmd) = (void(*)(int,char*))&Cbuf1;
		Cbuf(0, Command);
	}
int EBNum;
void ExplosiveBullets(int client)
{
	if(EBNum == 0)
	{
	char temp[0x100];
	_toc::stdc_snprintf(temp, 0x100, "setPerk %s specialty_explosivebullets 1", getPlayerName(client));
        Cbuf_AddText(temp);
        _toc::SV_GameSendServerCommand(client, 0, "v bg_bulletExplDmgFactor \"100\" bg_bulletExplRadius \"2000\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Explosive Bullets ^7[^2On/High^7]\"");
		EBNum = 1;
	}
	else if(EBNum == 1)
	{
		char temp[0x100];
		_toc::stdc_snprintf(temp, 0x100, "setPerk %s specialty_explosivebullets 1", getPlayerName(client));
        Cbuf_AddText(temp);
        _toc::SV_GameSendServerCommand(client, 0, "v bg_bulletExplDmgFactor \"100\" bg_bulletExplRadius \"1000\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Explosive Bullets ^7[^2On/^3Medium^7]\"");
		EBNum = 2;
	}
	else if(EBNum == 2)
	{
		char temp[0x100];
		_toc::stdc_snprintf(temp, 0x100, "setPerk %s specialty_explosivebullets 1", getPlayerName(client));
        Cbuf_AddText(temp);
        _toc::SV_GameSendServerCommand(client, 0, "v bg_bulletExplDmgFactor \"100\" bg_bulletExplRadius \"500\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Explosive Bullets ^7[^2On/^1Low^7]\"");
		EBNum = 3;
	}
	else if(EBNum == 3)
	{
		char temp[0x100];
		_toc::stdc_snprintf(temp, 0x100, "setPerk %s specialty_explosivebullets 0", getPlayerName(client));
        Cbuf_AddText(temp);
        _toc::SV_GameSendServerCommand(client, 0, "v bg_bulletExplDmgFactor \"0.1\" bg_bulletExplRadius \"10\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Explosive Bullets ^7[^1Off^7]\"");
		EBNum = 0;
	}
}

bool GM[18];
	void GodMode(int client)
	{
		if(GM[client] == false)
		{
			char buf[100];
			*(char*)(0x014E5429 + 0x3700 * client) = 0xFF, 0xFF;
			_toc::SV_GameSendServerCommand(client, 1, "f \"God Mode ^7[^2On^7]\"");
			GM[client] = true;
		}
		else
		{
			*(char*)(0x014E5429 + 0x3700 * client) = 0x00, 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"God Mode ^7[^1Off^7]\"");
			GM[client] = false;
		}
	}

	void Creators(int client)
	{
			_toc::SV_GameSendServerCommand(client, 1, "g \"^1Sub to ^5PlautGaming ^1and ^2DudeCanModHD\"");
			_toc::SV_GameSendServerCommand(client, 1, "h \"^1Sub to ^5PlautGaming ^1and ^2DudeCanModHD\"");
	}
	void FuckYou(int client)
	{
			_toc::SV_GameSendServerCommand(client, 1, "g \"^2Fuck ^1You ^4Bitch\"");
			_toc::SV_GameSendServerCommand(client, 1, "h \"^2Fuck ^1You ^4Bitch\"");
	}
	void TrickShot(int client)
	{
			_toc::SV_GameSendServerCommand(client, 1, "g \"^2TrickShot Last or GET DERANKED\"");
			_toc::SV_GameSendServerCommand(client, 1, "h \"^2TrickShot Last or GET DERANKED\"");
	}
	void Legitness(int client)
	{
			_toc::SV_GameSendServerCommand(client, 1, "g \"^2OMG ^1that's ^4Legitness\"");
			_toc::SV_GameSendServerCommand(client, 1, "h \"^2OMG ^1that's ^4Legitness\"");
	}
	
	bool NC[18];
	void NoClip(int client)
	{
		if(NC[client] == false)
		{
			*(char*)(0x014E5623 + 0x3700 * client) = 0x01;
			_toc::SV_GameSendServerCommand(client, 1, "f \"No Clip ^7[^2On^7]\"");
			NC[client] = true;
		}
		else
		{
			*(char*)(0x014E5623 + 0x3700 * client) = 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"No Clip ^7[^1Off^7]\"");
			NC[client] = false;
		}
	}
	bool UA[18];
	void UnlimitedAmmo(int client)
	{
		if(UA[client] == false)
		{
			*(char*)(0x014E24EC + 0x3700 * client) = 0x0F, 0xFF, 0xFF, 0xFF;
			*(char*)(0x014E24DC + 0x3700 * client) = 0x0F, 0xFF, 0xFF, 0xFF;
			*(char*)(0x014E2554 + 0x3700 * client) = 0x0F, 0xFF, 0xFF, 0xFF;
			*(char*)(0x014E256C + 0x3700 * client) = 0x0F, 0xFF, 0xFF, 0xFF;
			*(char*)(0x014E2560 + 0x3700 * client) = 0x0F, 0xFF, 0xFF, 0xFF;
			*(char*)(0x014E2578 + 0x3700 * client) = 0x0F, 0xFF, 0xFF, 0xFF;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Unlimited Ammo ^7[^2On^7]\"");
			UA[client] = true;
		}
		else
		{
			*(char*)(0x014E24EC + 0x3700 * client) = 0x00, 0x00, 0x00, 0xFF;
			*(char*)(0x014E24DC + 0x3700 * client) = 0x00, 0x00, 0x00, 0xFF;
			*(char*)(0x014E2554 + 0x3700 * client) = 0x00, 0x00, 0x00, 0xFF;
			*(char*)(0x014E256C + 0x3700 * client) = 0x00, 0x00, 0x00, 0xFF;
			*(char*)(0x014E2560 + 0x3700 * client) = 0x00, 0x00, 0x00, 0xFF;
			*(char*)(0x014E2578 + 0x3700 * client) = 0x00, 0x00, 0x00, 0xFF;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Unlimited Ammo ^7[^1Off^7]\"");
			UA[client] = false;
		}
	}
	bool DRS[18];
	void DoubleRunSpeed(int client)
	{
		if(DRS[client] == false)
		{
			*(char*)(0x014E543C + 0x3700 * client) = 0x40;
			_toc::SV_GameSendServerCommand(client, 1, "f \"2x Run Speed ^7[^2On^7]\"");
			DRS[client] = true;
		}
		else
		{
			*(char*)(0x014E543C + 0x3700 * client) = 0x3F;
			_toc::SV_GameSendServerCommand(client, 1, "f \"2x Run Speed ^7[^1Off^7]\"");
			DRS[client] = false;
		}
	}
	bool GR[18];
	void Gravity(int client)
	{
		if(GR[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v g_gravity ""20");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Low Gravity ^7[^2On^7]\"");
			GR[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v g_gravity ""600");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Low Gravity ^7[^1Off^7]\"");
			GR[client] = false;
		}
	}

	int TimescaleTog[18];

	void Timescale(int client)
	{
		if(TimescaleTog[client] == 0)
		{	
			_toc::SV_GameSendServerCommand(client, 1, "v timescale ""0.5");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Timescale ^7[^20.5^7]\"");
			TimescaleTog[client] = 1;
		}
		else if(TimescaleTog[client] == 1)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v timescale ""2");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Timescale ^7[^22^7]\"");
			TimescaleTog[client] = 2;
		}
		else if(TimescaleTog[client] == 2)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v timescale ""1");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Timescale ^7[^21^7]\"");
			TimescaleTog[client] = 0;
		}

	}

	bool SMR[18];
	void SuperMelee(int client)
	{
		if(SMR[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v player_meleeRange ""999");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Melee ^7[^2On^7]\"");
			SMR[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v player_meleeRange ""2");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Melee ^7[^1Off^7]\"");
			SMR[client] = false;
		}
	}
	bool TP[18];
	void ThirdPerson(int client)
	{
		if(TP[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_thirdperson ""1");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Third Person ^7[^2On^7]\"");
			TP[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_thirdperson ""0");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Third Person ^7[^1Off^7]\"");
			TP[client] = false;
		}
	}
	bool LHG[18];
	void LeftGun(int client)
	{
		if(LHG[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_gun_y ""10");
			_toc::SV_GameSendServerCommand(client, 1, "v cg_gun_x ""1");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Left Hand Gun ^7[^2On^7]\"");
			LHG[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_gun_y ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v cg_gun_x ""0");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Left Hand Gun ^7[^1Off^7]\"");
			LHG[client] = false;
		}
	}

	int FOVTog[18];
	void FOV(int client)
	{
		if(FOVTog[client] == 0)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_fov \"90\"");
			_toc::SV_GameSendServerCommand(client, 1, "f \"FOV ^7[^290^7]\"");
			FOVTog[client] = 1;
		}
		else if(FOVTog[client] == 1)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_fov \"120\"");
			_toc::SV_GameSendServerCommand(client, 1, "f \"FOV ^7[^2120^7]\"");
			FOVTog[client] = 2;
		}
		else if(FOVTog[client] == 2)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v cg_fov \"68\"");
			_toc::SV_GameSendServerCommand(client, 1, "f \"FOV ^7[^2Default^7]\"");
			FOVTog[client] = 0;
		}
	}
	
	bool SM[18];
	void SkateMod(int client)
	{
		if(SM[client] == false)
		{
			*(char*)(0x014E220E + 0x3700 * client) = 0x01;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Skate Mod ^7[^2On^7]\"");
			SM[client] = true;
		}
		else
		{
			*(char*)(0x014E220E + 0x3700 * client) = 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Skate Mod ^7[^1Off^7]\"");
			SM[client] = false;
		}
	}

bool isAC130[18];
	void GiveAC130(int client)
	{
		if(!isAC130[client])
		{
				_toc::giveWeapon(client, "ac130_105mm_mp", false, true, true);
				_toc::SV_GameSendServerCommand(client, 0, "f \"^2AC130 Given\"");
		}
		else
		{
			_toc::SwitchToWeap(client, "", getCurrentWeapon(client));
			_toc::SV_GameSendServerCommand(client, 0, "f \"^1AC130 Taken\"");
		}

		isAC130[client] = !isAC130[client];
	}

	bool RB[18];
	void RedBoxes(int client)
	{
		if(RB[client] == false)
		{
			*(char*)(0x014E2213 + 0x3700 * client) = 0x55;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Red Boxes ^7[^2On^7]\"");
			RB[client] = true;
		}
		else
		{
			*(char*)(0x014E2213 + 0x3700 * client) = 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Red Boxes ^7[^1Off^7]\"");
			RB[client] = false;
		}
	}
	bool SFH[18];
	void SuperForceHost(int client)
	{
		if(SFH[client] == false)
		{
		     *(char*)(0x1D148C7) = 0x01;
			 *(char*)(0x1D148B8) = 0x01;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Force Host ^7[^2On^7]\"");
			SFH[client] = true;
		}
		else
		{
			*(char*)(0x1D148C7) = 0x00;
			*(char*)(0x1D148B8) = 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Force Host ^7[^1Off^7]\"");
			SFH[client] = false;
		}
	}
	bool LC[18];
	void LittleCrosshair(int client)
	{
		if(LC[client] == false)
		{
			*(char*)(0x014E24D3 + 0x3700 * client) = 0x02;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Little Crosshair ^7[^2On^7]\"");
			LC[client] = true;
		}
		else
		{
			*(char*)(0x014E24D3 + 0x3700 * client) = 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Little Crosshair ^7[^1Off^7]\"");
			LC[client] = false;
		}
	}
	bool NR[18];
	void NoRecoil(int client)
	{
		if(NR[client] == false)
		{
			*(char*)(0x014E24BE + 0x3700 * client) = 0x04;
			_toc::SV_GameSendServerCommand(client, 1, "f \"No Recoil ^7[^2On^7]\"");
			NR[client] = true;
		}
		else
		{
			*(char*)(0x014E24BE + 0x3700 * client) = 0x00, 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"No Recoil ^7[^1Off^7]\"");
			NR[client] = false;
		}
	}
	bool JH[18];
	void SuperJump(int client)
	{
		if(JH[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v jump_height ""999");
			_toc::SV_GameSendServerCommand(client, 1, "v bg_fallDamageMinHeight ""999999");
			_toc::SV_GameSendServerCommand(client, 1, "v bg_fallDamageMaxHeight ""999999");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Jump ^7[^2On^7]\"");
			JH[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v jump_height ""59");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Jump ^7[^1Off^7]\"");
			JH[client] = false;
		}
	}
	bool isIntervention[18];
	void GiveI(int client)
	{
		if(!isIntervention[client])
		{
				_toc::giveWeapon(client, "cheytac_fmj_xmags_mp", false, true, true);
				_toc::SV_GameSendServerCommand(client, 0, "f \"^2Intervention Given\"");
		}
		else
		{
			_toc::SwitchToWeap(client, "", getCurrentWeapon(client));
			_toc::SV_GameSendServerCommand(client, 0, "f \"^1Intervention Taken\"");
		}

		isIntervention[client] = !isIntervention[client];
	}
	bool isGold[18];
	void GiveG(int client)
	{
		if(!isGold[client])
		{
				_toc::giveWeapon(client, "deserteaglegold_mp", false, true, true);
				_toc::SV_GameSendServerCommand(client, 0, "f \"^2Gold Deagle Given\"");
		}
		else
		{
			_toc::SwitchToWeap(client, "", getCurrentWeapon(client));
			_toc::SV_GameSendServerCommand(client, 0, "f \"^1Gold Deagle Taken\"");
		}

		isGold[client] = !isGold[client];
	}
	bool isDefault[18];
	void GiveD(int client)
	{
		if(!isDefault[client])
		{
				_toc::giveWeapon(client, "defaultweapon_mp", false, true, true);
				_toc::SV_GameSendServerCommand(client, 0, "f \"^2Default Weapon Given\"");
		}
		else
		{
			_toc::SwitchToWeap(client, "", getCurrentWeapon(client));
			_toc::SV_GameSendServerCommand(client, 0, "f \"^1Default Weapon Taken\"");
		}

		isDefault[client] = !isDefault[client];
	}
	bool isBarrett[18];
	void GiveB(int client)
	{
		if(!isBarrett[client])
		{
				_toc::giveWeapon(client, "barrett_fmj_xmags_mp", false, true, true);
				_toc::SV_GameSendServerCommand(client, 0, "f \"^2Barrett Given\"");
		}
		else
		{
			_toc::SwitchToWeap(client, "", getCurrentWeapon(client));
			_toc::SV_GameSendServerCommand(client, 0, "f \"^1Barrett Taken\"");
		}

		isBarrett[client] = !isBarrett[client];
	}
	bool isAim[18];
	void ToggleAim(int client)
	{
		if(!isAim[client])
		{
			_toc::SV_GameSendServerCommand(client, 0, "v aim_autoaim_enabled ""1");
			_toc::SV_GameSendServerCommand(client, 0, "v aim_autoaim_lerp ""100");
			_toc::SV_GameSendServerCommand(client, 0, "v aim_autoaim_region_height ""120");
			_toc::SV_GameSendServerCommand(client, 0, "v aim_autoaim_region_width ""99999999");
			char temp[0x100];
			_toc::stdc_snprintf(temp, 0x100, "SelectStringTableEntryInDvar A B aim_autoAimRangeScale 2", getPlayerName(client));
			Cbuf_AddText(temp); 
			_toc::SV_GameSendServerCommand(client, 0, "v aim_lockon_enabled ""1"); 
			_toc::SV_GameSendServerCommand(client, 0, "v aim_lockon_region_height ""0"); 
			_toc::SV_GameSendServerCommand(client, 0, "v aim_lockon_region_width ""720"); 
			_toc::SV_GameSendServerCommand(client, 0, "v aim_lockon_strength ""1"); 
			_toc::SV_GameSendServerCommand(client, 0, "v aim_lockon_deflection ""0.05");
			_toc::SV_GameSendServerCommand(client, 0, "f \"Aim Assist ^7[^2On^7]\"");
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 0, "f \"Aim Assist ^7[^1Off^7]\"");
		}

		isAim[client] = !isAim[client];
	}

	
	bool SP[18];
	void SuperSpeed(int client)
	{
		if(SP[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v g_speed ""800");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Speed ^7[^2On^7]\"");
			SP[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v g_speed ""190");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Super Speed ^7[^1Off^7]\"");
			SP[client] = false;
		}
	}
	bool IC[18];
	void IceClan(int client)
	{
		if(IC[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v clanname {BI}\"");
			_toc::SV_GameSendServerCommand(client, 1, "f \"ClanTag: {BI} ^7[^2Set^7]\"");
			IC[client] = true;
		}
	}
	
	bool FH[18];
	void ForceHost(int client)
	{
		if(FH[client] == false)
		{
			_toc::SV_GameSendServerCommand(client, 1, "v party_connectTimeout ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v party_host ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v party_hostmigration ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v onlinegame ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v onlinegameandhost ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v onlineunrankedgameandhost ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v migration_msgtimeout ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v migration_timeBetween ""999999");
			_toc::SV_GameSendServerCommand(client, 1, "v migration_verboseBroadcastTime ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v migrationPingTime ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_duration ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_enable ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_ingame_enable ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_timeout ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v cl_migrationTimeout ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v lobby_partySearchWaitTime ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_announceinterval ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_broadcast_interval ""99999");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_pingtest_timeout ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_timeout ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_timeoutmax ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_pingtest_retry ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_pingtest_timeout ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v g_kickHostIfIdle ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v sv_cheats ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v scr_dom_scorelimit ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v xblive_playEvenIfDown ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v party_hostmigration ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_endGameIfISuck ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_maxDoISuckFrames ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_maxHappyPingTime ""99999");
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_minTotalClientsForHappyTest ""99999");
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_enable ""0");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Force Host ^7[^2On^7]\"");
			FH[client] = true;
		}
		else
		{
			_toc::SV_GameSendServerCommand(client, 1, "v party_connectTimeout ""0"); 
			_toc::SV_GameSendServerCommand(client, 1, "v party_host ""0"); 
			_toc::SV_GameSendServerCommand(client, 1, "v party_hostmigration ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v onlinegame ""0"); 
			_toc::SV_GameSendServerCommand(client, 1, "v onlinegameandhost ""0"); 
			_toc::SV_GameSendServerCommand(client, 1, "v onlineunrankedgameandhost ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v migration_msgtimeout ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v migration_timeBetween ""30000"); 
			_toc::SV_GameSendServerCommand(client, 1, "v migration_verboseBroadcastTime ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v migrationPingTime ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_duration ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_enable ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_ingame_enable ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_timeout ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v cl_migrationTimeout ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v lobby_partySearchWaitTime ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_announceinterval ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_broadcast_interval ""200"); 
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_pingtest_timeout ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_timeout ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_timeoutmax ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_pingtest_retry ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v partymigrate_pingtest_timeout ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v g_kickHostIfIdle ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v sv_cheats ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v scr_dom_scorelimit ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v xblive_playEvenIfDown ""0");
			_toc::SV_GameSendServerCommand(client, 1, "v party_hostmigration ""1"); 
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_endGameIfISuck ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_maxDoISuckFrames ""1");
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_maxHappyPingTime ""400"); 
			_toc::SV_GameSendServerCommand(client, 1, "v badhost_minTotalClientsForHappyTest ""3"); 
			_toc::SV_GameSendServerCommand(client, 1, "v bandwidthtest_enable ""1");
			_toc::SV_GameSendServerCommand(client, 1, "f \"Force Host ^7[^1Off^7]\"");
			FH[client] = false;
		}
	}
	bool LVL[18];
	void level(int client)
	{
		if(LVL[client] == false)
		{
			*(char*)(0x01ff9a94) = 0x20, 0x64, 0x26, 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Level 70 ^7[^2Set^7]\"");
			LVL[client] = true;
		}
		else
		{
			*(char*)(0x01ff9a94) = 0x20, 0x64, 0x26, 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Level 70 ^7[^2Set^7]\"");
			LVL[client] = false;
		}
	}
	void UnlockAll (int client)
	{
		*(char*)(0x01FFA0C7) = 0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
			0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09, 0x09, 0x02, 
			0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
			0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 
			0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 
			0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
			0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 
			0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 
			0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 
			0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 
			0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 
			0x02, 0x02, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 
			0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x04, 0x02, 0x04, 0x04, 0x04, 0x02, 0x04, 
			0x04, 0x02, 0x02, 0x03, 0x03, 0x03, 0x02, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 
			0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 
			0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
			0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 
			0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 
			0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 
			0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 
			0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 
			0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 
			0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 
			0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
			0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xF4, 
			0x30, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 
			0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 
			0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
			0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 
			0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 
			0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 
			0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 
			0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 
			0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 
			0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 
			0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
			0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 
			0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 
			0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 
			0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 
			0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 
			0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 
			0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 
			0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
			0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 
			0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 
			0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 
			0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 
			0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 
			0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 
			0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 
			0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 
			0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 
			0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 
			0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 
			0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 
			0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 
			0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 
			0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 
			0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 
			0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 
			0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 
			0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 
			0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 
			0xE8, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 
			0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 
			0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 
			0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 
			0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 
			0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 
			0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 
			0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 
			0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 
			0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 
			0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 
			0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 
			0x00, 0x61, 0x08, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xFA, 
			0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0xE8, 0x03, 
			0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0xFA, 0x00, 0x00, 
			0x00, 0x64, 0x00, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 
			0xEE, 0x02, 0x00, 0x00, 0x40, 0x24, 0x14, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x32, 
			0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 
			0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 
			0x00, 0x32, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
			0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0A, 
			0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 
			0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x32, 0x00, 0x00, 
			0x00, 0x1E, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 
			0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFF, 
			0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
			0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 
			0xFF, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xC8, 0x00, 
			0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
			0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 
			0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 
			0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
			0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 
			0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 
			0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 
			0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
			0x00, 0x50, 0xC3, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 
			0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 
			0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 
			0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 
			0x00, 0x32, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 
			0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 
			0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 
			0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 
			0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 
			0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 
			0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 
			0x00, 0x01, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 
			0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 
			0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 
			0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 
			0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 
			0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 
			0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 
			0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 
			0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 
			0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 
			0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xFF, 0x00, 
			0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 
			0x00, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 
			0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 
			0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 
			0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 
			0x00, 0x2C, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 
			0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x13, 0x00, 0x18, 
			0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFA, 
			0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
			0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 
			0xDD, 0x99, 0x03;
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^2Started^7]\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^220%^7]\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^240%^7]\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^260%^7]\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^280%^7]\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^2100%^7]\"");
		_toc::SV_GameSendServerCommand(client, 1, "f \"Unlock All ^7[^2Complete^7]\"");
	}
	int PrestigeNumber;
	void Prestige(int client)
	{
		if(PrestigeNumber == 0)
		{
			*(char*)(0x01FF9A9C) = 0x00;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^20^7]\"");
			PrestigeNumber = 1;
		}
		else if(PrestigeNumber == 1)
		{
			*(char*)(0x01FF9A9C) = 0x01;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^21^7]\"");
			PrestigeNumber = 2;
		}
		else if(PrestigeNumber == 2)
		{
			*(char*)(0x01FF9A9C) = 0x02;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^22^7]\"");
			PrestigeNumber = 3;
		}
		else if(PrestigeNumber == 3)
		{
			*(char*)(0x01FF9A9C) = 0x03;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^23^7]\"");
			PrestigeNumber = 4;
		}
		else if(PrestigeNumber == 4)
		{
			*(char*)(0x01FF9A9C) = 0x04;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^24^7]\"");
			PrestigeNumber = 5;
		}
		else if(PrestigeNumber == 5)
		{
			*(char*)(0x01FF9A9C) = 0x05;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^25^7]\"");
			PrestigeNumber = 6;
		}
		else if(PrestigeNumber == 6)
		{
			*(char*)(0x01FF9A9C) = 0x06;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^26^7]\"");
			PrestigeNumber = 7;
		}
		else if(PrestigeNumber == 7)
		{
			*(char*)(0x01FF9A9C) = 0x07;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^27^7]\"");
			PrestigeNumber = 8;
		}
		else if(PrestigeNumber == 8)
		{
			*(char*)(0x01FF9A9C) = 0x08;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^28^7]\"");
			PrestigeNumber = 9;
		}
		else if(PrestigeNumber == 9)
		{
			*(char*)(0x01FF9A9C) = 0x09;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^29^7]\"");
			PrestigeNumber = 10;
		}
		else if(PrestigeNumber == 10)
		{
			*(char*)(0x01FF9A9C) = 0x10;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^210^7]\"");
			PrestigeNumber = 11;
		}
		else if(PrestigeNumber == 11)
		{
			*(char*)(0x01FF9A9C) = 0x11;
			_toc::SV_GameSendServerCommand(client, 1, "f \"Prestige: ^7[^211^7]\"");
			PrestigeNumber = 0;
		}
	}